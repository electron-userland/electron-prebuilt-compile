'use strict';

var _electron = require('electron');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _electronCompile = require('electron-compile');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findPackageJson(initScript) {
  if (initScript === '/' || initScript.match(/^[A-Za-z]:$/)) {
    throw new Error("Can't find package.json");
  }

  // Walk up the parent directories until we find package.json. Make sure that
  // we're not actually stumbling upon a parent npm package
  let ret = _path2.default.join(initScript, 'package.json');
  if (_fs2.default.statSyncNoException(ret) && !_path2.default.resolve(_path2.default.dirname(ret), '..').match(/[\\\/]node_modules$/i)) {
    return ret;
  }

  return findPackageJson(_path2.default.dirname(initScript));
}

/**
 * Some debugger environment reconstruct process argument and inject args ignoring original order,
 * extract to find out right path for init script.
 *
 */
function getInitScriptPath() {
  const rawArgv = process.argv.filter(x => x.indexOf(`--inspect=`) === -1 && x.indexOf(`--debug-brk`))[2];
  return _path2.default.resolve(rawArgv);
}

function main() {
  const initScript = getInitScriptPath();
  const packageJson = findPackageJson(initScript);
  const appPath = _path2.default.dirname(packageJson);
  const packageJsonData = JSON.parse(_fs2.default.readFileSync(packageJson, 'utf8'));

  _electron.app.setName(packageJsonData.productName || packageJsonData.name);
  _electron.app.setVersion(packageJsonData.version);
  _electron.app.setAppPath(appPath);

  // Reconstitute the original arguments
  const args = process.argv.slice(2);
  process.argv = [process.argv[0]].concat(args);

  //passthrough electron-compile command args if it's specified
  const parsedArgs = require('yargs').alias('c', 'cachedir').alias('s', 'sourcemapdir').argv;
  (0, _electronCompile.init)(_path2.default.dirname(packageJson), initScript, null, parsedArgs.c || null, parsedArgs.s || null);
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lczYtaW5pdC5qcyJdLCJuYW1lcyI6WyJmaW5kUGFja2FnZUpzb24iLCJpbml0U2NyaXB0IiwibWF0Y2giLCJFcnJvciIsInJldCIsInBhdGgiLCJqb2luIiwiZnMiLCJzdGF0U3luY05vRXhjZXB0aW9uIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJnZXRJbml0U2NyaXB0UGF0aCIsInJhd0FyZ3YiLCJwcm9jZXNzIiwiYXJndiIsImZpbHRlciIsIngiLCJpbmRleE9mIiwibWFpbiIsInBhY2thZ2VKc29uIiwiYXBwUGF0aCIsInBhY2thZ2VKc29uRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsImFwcCIsInNldE5hbWUiLCJwcm9kdWN0TmFtZSIsIm5hbWUiLCJzZXRWZXJzaW9uIiwidmVyc2lvbiIsInNldEFwcFBhdGgiLCJhcmdzIiwic2xpY2UiLCJjb25jYXQiLCJwYXJzZWRBcmdzIiwicmVxdWlyZSIsImFsaWFzIiwiYyIsInMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUEsU0FBU0EsZUFBVCxDQUF5QkMsVUFBekIsRUFBcUM7QUFDbkMsTUFBSUEsZUFBZSxHQUFmLElBQXNCQSxXQUFXQyxLQUFYLENBQWlCLGFBQWpCLENBQTFCLEVBQTJEO0FBQ3pELFVBQU0sSUFBSUMsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBSUMsTUFBTUMsZUFBS0MsSUFBTCxDQUFVTCxVQUFWLEVBQXNCLGNBQXRCLENBQVY7QUFDQSxNQUFJTSxhQUFHQyxtQkFBSCxDQUF1QkosR0FBdkIsS0FBK0IsQ0FBQ0MsZUFBS0ksT0FBTCxDQUFhSixlQUFLSyxPQUFMLENBQWFOLEdBQWIsQ0FBYixFQUFnQyxJQUFoQyxFQUFzQ0YsS0FBdEMsQ0FBNEMsc0JBQTVDLENBQXBDLEVBQXlHO0FBQ3ZHLFdBQU9FLEdBQVA7QUFDRDs7QUFFRCxTQUFPSixnQkFBZ0JLLGVBQUtLLE9BQUwsQ0FBYVQsVUFBYixDQUFoQixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU1UsaUJBQVQsR0FBNkI7QUFDM0IsUUFBTUMsVUFBVUMsUUFBUUMsSUFBUixDQUFhQyxNQUFiLENBQXFCQyxDQUFELElBQU9BLEVBQUVDLE9BQUYsQ0FBVyxZQUFYLE1BQTRCLENBQUMsQ0FBN0IsSUFBa0NELEVBQUVDLE9BQUYsQ0FBVyxhQUFYLENBQTdELEVBQXVGLENBQXZGLENBQWhCO0FBQ0EsU0FBT1osZUFBS0ksT0FBTCxDQUFhRyxPQUFiLENBQVA7QUFDRDs7QUFFRCxTQUFTTSxJQUFULEdBQWdCO0FBQ2QsUUFBTWpCLGFBQWFVLG1CQUFuQjtBQUNBLFFBQU1RLGNBQWNuQixnQkFBZ0JDLFVBQWhCLENBQXBCO0FBQ0EsUUFBTW1CLFVBQVVmLGVBQUtLLE9BQUwsQ0FBYVMsV0FBYixDQUFoQjtBQUNBLFFBQU1FLGtCQUFrQkMsS0FBS0MsS0FBTCxDQUFXaEIsYUFBR2lCLFlBQUgsQ0FBZ0JMLFdBQWhCLEVBQTZCLE1BQTdCLENBQVgsQ0FBeEI7O0FBRUFNLGdCQUFJQyxPQUFKLENBQVlMLGdCQUFnQk0sV0FBaEIsSUFBK0JOLGdCQUFnQk8sSUFBM0Q7QUFDQUgsZ0JBQUlJLFVBQUosQ0FBZVIsZ0JBQWdCUyxPQUEvQjtBQUNBTCxnQkFBSU0sVUFBSixDQUFlWCxPQUFmOztBQUVBO0FBQ0EsUUFBTVksT0FBT25CLFFBQVFDLElBQVIsQ0FBYW1CLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FBYjtBQUNBcEIsVUFBUUMsSUFBUixHQUFlLENBQUNELFFBQVFDLElBQVIsQ0FBYSxDQUFiLENBQUQsRUFBa0JvQixNQUFsQixDQUF5QkYsSUFBekIsQ0FBZjs7QUFFQTtBQUNBLFFBQU1HLGFBQWFDLFFBQVEsT0FBUixFQUFpQkMsS0FBakIsQ0FBdUIsR0FBdkIsRUFBNEIsVUFBNUIsRUFBd0NBLEtBQXhDLENBQThDLEdBQTlDLEVBQW1ELGNBQW5ELEVBQW1FdkIsSUFBdEY7QUFDQSw2QkFBS1QsZUFBS0ssT0FBTCxDQUFhUyxXQUFiLENBQUwsRUFBZ0NsQixVQUFoQyxFQUE0QyxJQUE1QyxFQUFrRGtDLFdBQVdHLENBQVgsSUFBZ0IsSUFBbEUsRUFBd0VILFdBQVdJLENBQVgsSUFBZ0IsSUFBeEY7QUFDRDs7QUFFRHJCIiwiZmlsZSI6ImVzNi1pbml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSAnZWxlY3Ryb24nO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHtpbml0fSBmcm9tICdlbGVjdHJvbi1jb21waWxlJztcclxuXHJcbmZ1bmN0aW9uIGZpbmRQYWNrYWdlSnNvbihpbml0U2NyaXB0KSB7XHJcbiAgaWYgKGluaXRTY3JpcHQgPT09ICcvJyB8fCBpbml0U2NyaXB0Lm1hdGNoKC9eW0EtWmEtel06JC8pKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIHBhY2thZ2UuanNvblwiKTtcclxuICB9XHJcblxyXG4gIC8vIFdhbGsgdXAgdGhlIHBhcmVudCBkaXJlY3RvcmllcyB1bnRpbCB3ZSBmaW5kIHBhY2thZ2UuanNvbi4gTWFrZSBzdXJlIHRoYXRcclxuICAvLyB3ZSdyZSBub3QgYWN0dWFsbHkgc3R1bWJsaW5nIHVwb24gYSBwYXJlbnQgbnBtIHBhY2thZ2VcclxuICBsZXQgcmV0ID0gcGF0aC5qb2luKGluaXRTY3JpcHQsICdwYWNrYWdlLmpzb24nKVxyXG4gIGlmIChmcy5zdGF0U3luY05vRXhjZXB0aW9uKHJldCkgJiYgIXBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUocmV0KSwgJy4uJykubWF0Y2goL1tcXFxcXFwvXW5vZGVfbW9kdWxlcyQvaSkpIHtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmluZFBhY2thZ2VKc29uKHBhdGguZGlybmFtZShpbml0U2NyaXB0KSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTb21lIGRlYnVnZ2VyIGVudmlyb25tZW50IHJlY29uc3RydWN0IHByb2Nlc3MgYXJndW1lbnQgYW5kIGluamVjdCBhcmdzIGlnbm9yaW5nIG9yaWdpbmFsIG9yZGVyLFxyXG4gKiBleHRyYWN0IHRvIGZpbmQgb3V0IHJpZ2h0IHBhdGggZm9yIGluaXQgc2NyaXB0LlxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5pdFNjcmlwdFBhdGgoKSB7XHJcbiAgY29uc3QgcmF3QXJndiA9IHByb2Nlc3MuYXJndi5maWx0ZXIoKHgpID0+IHguaW5kZXhPZihgLS1pbnNwZWN0PWApID09PSAtMSAmJiB4LmluZGV4T2YoYC0tZGVidWctYnJrYCkpWzJdO1xyXG4gIHJldHVybiBwYXRoLnJlc29sdmUocmF3QXJndik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgY29uc3QgaW5pdFNjcmlwdCA9IGdldEluaXRTY3JpcHRQYXRoKCk7XHJcbiAgY29uc3QgcGFja2FnZUpzb24gPSBmaW5kUGFja2FnZUpzb24oaW5pdFNjcmlwdCk7XHJcbiAgY29uc3QgYXBwUGF0aCA9IHBhdGguZGlybmFtZShwYWNrYWdlSnNvbik7XHJcbiAgY29uc3QgcGFja2FnZUpzb25EYXRhID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGFja2FnZUpzb24sICd1dGY4JykpO1xyXG5cclxuICBhcHAuc2V0TmFtZShwYWNrYWdlSnNvbkRhdGEucHJvZHVjdE5hbWUgfHwgcGFja2FnZUpzb25EYXRhLm5hbWUpO1xyXG4gIGFwcC5zZXRWZXJzaW9uKHBhY2thZ2VKc29uRGF0YS52ZXJzaW9uKTtcclxuICBhcHAuc2V0QXBwUGF0aChhcHBQYXRoKTtcclxuXHJcbiAgLy8gUmVjb25zdGl0dXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcclxuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xyXG4gIHByb2Nlc3MuYXJndiA9IFtwcm9jZXNzLmFyZ3ZbMF1dLmNvbmNhdChhcmdzKTtcclxuXHJcbiAgLy9wYXNzdGhyb3VnaCBlbGVjdHJvbi1jb21waWxlIGNvbW1hbmQgYXJncyBpZiBpdCdzIHNwZWNpZmllZFxyXG4gIGNvbnN0IHBhcnNlZEFyZ3MgPSByZXF1aXJlKCd5YXJncycpLmFsaWFzKCdjJywgJ2NhY2hlZGlyJykuYWxpYXMoJ3MnLCAnc291cmNlbWFwZGlyJykuYXJndjtcclxuICBpbml0KHBhdGguZGlybmFtZShwYWNrYWdlSnNvbiksIGluaXRTY3JpcHQsIG51bGwsIHBhcnNlZEFyZ3MuYyB8fCBudWxsLCBwYXJzZWRBcmdzLnMgfHwgbnVsbCk7XHJcbn1cclxuXHJcbm1haW4oKVxyXG4iXX0=